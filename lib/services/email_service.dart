import 'dart:io' as io;
import 'package:flutter/foundation.dart';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:path_provider/path_provider.dart';

class EmailService {
  // Email configuration
  final String _smtpServer;
  final int _smtpPort;
  final bool _useSSL;
  final String _username;
  final String _password;
  final List<String> _recipients;
  
  EmailService({
    required String smtpServer, 
    required int smtpPort,
    required bool useSSL,
    required String username,
    required String password,
    required List<String> recipients,
  }) : 
    _smtpServer = smtpServer,
    _smtpPort = smtpPort,
    _useSSL = useSSL,
    _username = username,
    _password = password,
    _recipients = recipients;
    
  // Getter para os recipients que retorna uma c√≥pia segura
  List<String> get recipients => List<String>.from(_recipients);
  
  /// Send weapon detection alert email with image
  Future<bool> sendWeaponDetectionAlert({
    required String cameraName,
    required String cameraId,
    required String detectionMessage,
    required List<Map<String, dynamic>> detections,
    required List<int> imageBytes,
    String imageFilename = 'weapon_detection.jpg',
  }) async {
    try {
      print('üìß Iniciando envio de email...');
      
      // Valida√ß√£o dos destinat√°rios
      if (_recipients.isEmpty) {
        print('‚ùå Nenhum destinat√°rio configurado para email');
        return false;
      }
      
      print('üìß Preparando email para ${_recipients.length} destinat√°rios: ${_recipients.join(', ')}');
      print('üìß Usando servidor: $_smtpServer:$_smtpPort');
      print('üìß Usu√°rio: $_username');
      
      // Configure SMTP server
      SmtpServer smtpServer;
      
      // Use configura√ß√£o espec√≠fica para Gmail
      if (_smtpServer.contains('gmail')) {
        print('üìß Usando configura√ß√£o espec√≠fica para Gmail');
        smtpServer = gmail(_username, _password);
      } else {
        print('üìß Usando configura√ß√£o SMTP personalizada');
        smtpServer = SmtpServer(
          _smtpServer,
          port: _smtpPort,
          ssl: _useSSL,
          username: _username,
          password: _password,
        );
      }
      
      // Create the email message
      final message = Message()
        ..from = Address(_username, 'Sistema de Seguran√ßa - $cameraName')
        ..recipients.addAll(_recipients)
        ..subject = 'üö® ALERTA! Arma detectada na c√¢mera $cameraName'
        ..text = _createAlertEmailBody(cameraName, cameraId, detectionMessage, detections)
        ..html = _createAlertEmailHtml(cameraName, cameraId, detectionMessage, detections);
        
      // S√≥ adiciona anexos em plataformas n√£o-web
      if (!kIsWeb) {
        // Save image to temporary file for attachment
        final tempDir = await getTemporaryDirectory();
        final tempFile = io.File('${tempDir.path}/$imageFilename');
        await tempFile.writeAsBytes(imageBytes);
        print('üìß Imagem salva temporariamente em: ${tempFile.path}');
        
        message.attachments = [
          FileAttachment(tempFile)
            ..location = Location.inline
            ..cid = '<weapon_detection_image>'
        ];
        
        // Limpeza do arquivo tempor√°rio depois  
        addPostProcessing(() async {
          try {
            await tempFile.delete();
          } catch (e) {
            print('‚ö†Ô∏è Erro ao deletar arquivo tempor√°rio: $e');
          }
        });
      } else {
        // Em web, adicionamos uma mensagem avisando sobre a aus√™ncia da imagem
        message.html = message.html! + '''
        <div style="color: #FF5722; padding: 10px; margin-top: 20px; border: 1px solid #FF5722; border-radius: 5px;">
          <p><strong>Nota:</strong> A imagem da detec√ß√£o n√£o est√° dispon√≠vel neste email devido √†s limita√ß√µes t√©cnicas.</p>
        </div>
        ''';
      }
      
      print('üìß Tentando enviar email...');
      
      // Send the email
      final sendReport = await send(message, smtpServer);
      print('‚úÖ Email enviado com sucesso: ${sendReport.toString()}');
      
      return true;
    } catch (e) {
      print('‚ùå Erro detalhado ao enviar email: $e');
      
      // Log detalhado do erro
      if (e is MailerException) {
        print('Detalhes do erro de email:');
        for (var problem in e.problems) {
          print('  - ${problem.code}: ${problem.msg}');
        }
      } else if (e is io.SocketException) {
        print('Erro de conex√£o: ${e.message}');
        print('Endere√ßo: ${e.address?.address}');
        print('Porta: ${e.port}');
      }
      
      return false;
    }
  }

  String _createAlertEmailBody(
    String cameraName, 
    String cameraId, 
    String message, 
    List<Map<String, dynamic>> detections
  ) {
    final timestamp = DateTime.now().toString();
    
    final detectionsText = detections.map((detection) {
      final className = detection['class'] ?? 'Arma desconhecida';
      final confidence = detection['confidence'] != null ? 
          '${(detection['confidence'] * 100).toStringAsFixed(1)}%' : 'N/A';
      
      return '‚Ä¢ $className (Confian√ßa: $confidence)';
    }).join('\n');
    
    return '''
üö® ALERTA DE SEGURAN√áA - ARMA DETECTADA üö®

C√¢mera: $cameraName (ID: $cameraId)
Data/Hora: $timestamp
Mensagem: $message

ARMAS DETECTADAS:
$detectionsText

‚ö†Ô∏è  A√á√ÉO IMEDIATA NECESS√ÅRIA ‚ö†Ô∏è
''';
  }
  
  String _createAlertEmailHtml(
    String cameraName, 
    String cameraId, 
    String message, 
    List<Map<String, dynamic>> detections
  ) {
    final timestamp = DateTime.now().toString();
    
    final detectionsHtml = detections.map((detection) {
      final className = detection['class'] ?? 'Arma desconhecida';
      final confidence = detection['confidence'] != null ? 
          '${(detection['confidence'] * 100).toStringAsFixed(1)}%' : 'N/A';
          
      return '''
        <li style="margin: 8px 0">
          <strong>$className</strong> (Confian√ßa: $confidence)
        </li>
      ''';
    }).join('\n');
    
    return '''
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial, sans-serif; line-height: 1.6; }
    .header { color: #d32f2f; font-size: 24px; font-weight: bold; }
    .alert { background-color: #ffebee; border-left: 4px solid #f44336; padding: 15px; }
    .image { margin: 20px 0; }
    img { max-width: 100%; border: 1px solid #ddd; }
  </style>
</head>
<body>
  <div class="header">üö® ALERTA DE SEGURAN√áA - ARMA DETECTADA</div>
  
  <div class="alert">
    <p><strong>C√¢mera:</strong> $cameraName (ID: $cameraId)<br>
    <strong>Data/Hora:</strong> $timestamp<br>
    <strong>Mensagem:</strong> $message</p>
  </div>
  
  <h3>Armas Detectadas:</h3>
  <ul>
    $detectionsHtml
  </ul>
  
  <div class="image">
    <h4>Imagem capturada:</h4>
    <img src="cid:weapon_detection_image" alt="Imagem da detec√ß√£o">
  </div>
  
  <div class="alert">
    <p><strong>‚ö†Ô∏è A√á√ÉO IMEDIATA NECESS√ÅRIA</strong></p>
    <p>Verifique a c√¢mera imediatamente e tome as medidas de seguran√ßa apropriadas.</p>
  </div>
</body>
</html>
''';
  }

  // M√©todo de teste para verificar se a configura√ß√£o est√° correta
  Future<bool> testConnection() async {
    try {
      print('üìß Testando conex√£o com servidor: $_smtpServer:$_smtpPort');
      print('üìß Usu√°rio: $_username');
      
      // Verifica se est√° em ambiente web
      if (kIsWeb) {
        print('üìß Executando em ambiente Web - realizando valida√ß√£o b√°sica');
        // Em ambiente web, apenas validamos as credenciais em vez de tentar conectar
        if (_username.isEmpty || !_username.contains('@')) {
          throw Exception('Email inv√°lido');
        }
        if (_password.isEmpty) {
          throw Exception('Senha n√£o fornecida');
        }
        
        // Como n√£o podemos testar a conex√£o real em web, retornamos sucesso se credenciais parecerem v√°lidas
        print('‚úÖ Valida√ß√£o b√°sica de credenciais bem-sucedida (modo web)');
        return true;
      }
      
      // Em plataformas nativas, tentamos conectar de fato
      SmtpServer smtpServer;
      
      if (_smtpServer.contains('gmail')) {
        print('üìß Usando configura√ß√£o espec√≠fica para Gmail');
        smtpServer = gmail(_username, _password);
      } else {
        print('üìß Usando configura√ß√£o SMTP personalizada');
        smtpServer = SmtpServer(
          _smtpServer,
          port: _smtpPort,
          ssl: _useSSL,
          username: _username,
          password: _password,
        );
      }
      
      // Modifica√ß√£o aqui - criamos um cliente SMTP simples em vez de usar PersistentConnection
      // Teste simples de conex√£o usando o m√©todo send com uma mensagem vazia
      final message = Message()
        ..from = Address(_username, 'Test')
        ..recipients.add(_username)
        ..subject = 'Test Connection'
        ..text = 'This is a test message';
      
      try {
        // Tentar conectar ao servidor usando o m√©todo send, mas sem realmente enviar a mensagem
        final connection = PersistentConnection(smtpServer);
        await connection.send(message);
        await connection.close();
        print('‚úÖ Conex√£o com servidor de email bem-sucedida!');
        return true;
      } finally {
        // Removes the client.close() as there's no client variable defined
      }
    } catch (e) {
      print('‚ùå Erro ao testar conex√£o com servidor de email: $e');
      
      // Log detalhado do erro
      if (e is MailerException) {
        print('Detalhes do erro de email:');
        for (var problem in e.problems) {
          print('  - ${problem.code}: ${problem.msg}');
        }
      } else if (e is io.SocketException) {
        print('Erro de conex√£o: ${e.message}');
        print('Endere√ßo: ${e.address?.address}');
        print('Porta: ${e.port}');
      }
      
      return false;
    }
  }
}

// Helper para anexar tarefas de limpeza
final List<Future<void> Function()> _cleanupTasks = [];

void addPostProcessing(Future<void> Function() task) {
  _cleanupTasks.add(task);
}

Future<void> runCleanupTasks() async {
  for (final task in _cleanupTasks) {
    try {
      await task();
    } catch (e) {
      print('Erro em tarefa de limpeza: $e');
    }
  }
  _cleanupTasks.clear();
}